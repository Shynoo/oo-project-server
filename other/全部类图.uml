@startuml

package controller <<Cloud>>{
    class SampleController
}

class SampleController{
    __
    controllerMethod
    ...
}


package service <<cloud>>{
    class UserService
    class BookService
}
class UserService{
    + boolean checkUserPassword()
    + User getUserById()
    + int addUser()
    + int deletUser()
    + int borrowBook()
    + int giveBackBook()
    + int addBook()
    + int deleteBook()
    + List<Book> getUserAllBorrowingBooks()
    + Map getAllUsers()

}
SampleController *-- UserService

class BookService{
    List<Book> searchBookByName()
    List<Book> searchBookByType()
    Book getBookById()
}
SampleController *-- BookService


package dao <<cloud>>{
    interface UserDao
    class LocalUserDao
    interface BookDao
    interface BorrowingDao
    class LocalBorrowingDao
    class LocalBookDao
}


interface UserDao{
    User getUserById()
    String getUserPassword()
    int addUser()
    int deletUser()
    int updateUser()
}
UserService -- UserDao 
BookService -- UserDao
class LocalUserDao{
    __
    ...
}
UserDao <|.. LocalUserDao

interface BookDao{
    Book getBookById()
    List<Book> getBooksByName()
    List<Book> searchBookByName()
    List<Book> searchBookByType()
    int addBook()
    int deletBook()
    int updateBook()
}
UserService -- BookDao 
BookService -- BookDao

class LocalBookDao{
    __
    ...
}
BookDao <|.. LocalBookDao

interface BorrowingDao{
    + int borrowOut()
    + int giveBack()
    + List<String> getUserAllBorrowedBooks()
    + String getBookOwner();
    + Date bookOutDay();
}
UserService -- BorrowingDao

class LocalBorrowingDao{
    __
    ...
}
BorrowingDao <|.. LocalBorrowingDao


package user <<cloud>>{
    class User
    class UserFactory
    class UserBuilder
    class UserType
    class Admin
}

class User{
    + boolean couldManageUser()
    + boolean couldManageBook()
    + User creatNormalUser()
    + User creatAdvanceUser()
}

class UserFactory{
    # User creatNormalUser()
    # User creatAdvanceUser()
}
User *-- UserFactory

class UserBuilder{
    
}
UserFactory *-- UserBuilder

enum UserType{
    Normal
    Advance
    Admin
}
User *-- UserType 

class Admin{
    + User createAdminUser()
}
User <|-- Admin



package book <<cloud>>{
    class Book
    class BookType
    class BookStatus
    class BookBuilder
}

class Book{
    + BookBuilder newBook()
    + (static) String generateBookId()
}

class BookBuilder{

}

Book o-- BookBuilder


enum BookType{
    + MATH
    + ENGLISH
    + PHYSICS
    + CHEMISREY
    + BIOLOGY
    + COMPUTER_SCIENCE
    __
    + long id
    + String typeName
}

enum BookStatus{
    + IN_LIBRARY
    + BORROWED_OUT
}

Book *-- BookStatus
Book *-- BookType

@endurl